---
name: haproxy

description: "The HAProxy server can be used to terminate SSL in front of the Routers. Each HAProxy instance should point to multiple Routers."

packages:
- haproxy
- ttar

templates:
  haproxy.config.erb:        config/haproxy.config
  haproxy_ctl:               bin/haproxy_ctl
  monit_debugger:            bin/monit_debugger
  certs.ttar.erb:            config/certs.ttar
  ssl_redirect.map.erb:      config/ssl_redirect.map
  backend-ca-certs.erb:      config/backend-ca-certs.pem
  helpers/ctl_setup.sh:      helpers/ctl_setup.sh
  helpers/ctl_utils.sh:      helpers/ctl_utils.sh
  properties.sh.erb:    data/properties.sh

properties:
  ha_proxy.syslog_server:
    description: "An IPv4 address optionally followed by a colon and a UDP port. It can also be an IPv6 address or filesystem path to a UNIX domain socket."
    default: "127.0.0.1"
  ha_proxy.log_level:
    description: "Log level"
    default: "info"
  ha_proxy.internal_only_domains:
    description: "Array of domains for internal-only apps/services (not hostnames for the apps/services)"
    default: []
  ha_proxy.trusted_domain_cidrs:
    description: "Space separated trusted cidr blocks for internal_only_domains"
    default: 0.0.0.0/32
  ha_proxy.ssl_pem:
    description: "SSL certificate (PEM file), or an array of SSL certificates (PEM files)"
    default: ~
  ha_proxy.backend_ca_file:
    description: "SSL CA certificate chain (PEM file) concatenated together for backend SSL http servers"
  ha_proxy.disable_http:
    description: "Disable port 80 traffic"
    default: false
  ha_proxy.enable_4443:
    description: "Enables port 4443 for backwards compatibility with WSS-based apps using the old CF haproxy"
    default: false
  ha_proxy.https_redirect_domains:
    description: "For each domain in this array, a HTTPS redirect rule will be put in the config file. Redirect will be applied for all subdomains"
    default: []
  ha_proxy.https_redirect_all:
    description: "If this is set to 'true', a https redirect rule for all http calls will be put in the config file"
    default: false
  ha_proxy.ssl_ciphers:
    default: ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK
    description: "List of SSL Ciphers that are passed to HAProxy"
  ha_proxy.default_dh_param:
    default: 2048
    description: "Maximum size of DH params when generating epmehmeral keys during key exchange"

  ha_proxy.connect_timeout:
    description: "Timeout waiting for connections to establish to a server (in seconds)"
    default:     5
  ha_proxy.client_timeout:
    description: "Timeout waiting for data from a client (in seconds)"
    default:     30
  ha_proxy.server_timeout:
    description: "Timeout waiting for data from a server (in seconds)"
    default:     30
  ha_proxy.websocket_timeout:
    description: "Timeout for websocket/tunnel traffic (in seconds)"
    default:     3600
  ha_proxy.keepalive_timeout:
    description: "Timeout waiting for new HTTP requests under http keep-alive mode (in seconds)"
    default:     1
  ha_proxy.request_timeout:
    description: "Maximum HTTP request length (in seconds)"
    default:     30
  ha_proxy.queue_timeout:
    description: "Timeout for requests queued waiting for free connection slots (in seconds)"
    default:     30

  ha_proxy.stats_enable:
    description: "If true, haproxy will enable a socket for stats. You can see the stats on haproxy_ip:9000/haproxy_stats"
    default: false
  ha_proxy.stats_bind:
    description: "Define one or several listening addresses and/or ports in a frontend."
    default: "*:9000"
  ha_proxy.stats_user:
    description: "User name to authenticate haproxy stats"
  ha_proxy.stats_password:
    description: "Password to authenticate haproxy stats"
  ha_proxy.stats_uri:
    description: "URI used to access the stats UI."
    default: "haproxy_stats"
  ha_proxy.trusted_stats_cidrs:
    description: "Trusted ip range that can access the stats UI"
    default: 0.0.0.0/32

  ha_proxy.backend_servers:
    description: "Array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)"
    default: []
  ha_proxy.backend_ssl_verify:
    description: "Enable SSL verificatication for backend servers.  Requires `ha_proxy.backend_ca_file` key to be set."
    default: false
  ha_proxy.backend_ssl_noverify:
    description: "Enable SSL for backend servers with no verification.  Ensure `ha_proxy.backend_ssl_verify` is set to false when using this."
    default: false
  ha_proxy.backend_ssl_verifyhost:
    description: "Optional hostname to verify in the x509 certificate subject for SSL-enabled backend servers.  Ensure `ha_proxy.backend_ssl_verify` is set to true when using this."
  ha_proxy.backend_port:
    description: "Listening port for Router"
    default: 80
  ha_proxy.compress_types:
    description: "If this property is set, gzip compression will be activated for the mime types named in this property. definition like 'text/html text/plain text/css'"
    default: ""

  ha_proxy.routed_backend_servers:
    description: "Hash of the URL prefixes -> array of the router IPs acting as the HTTP/TCP backends (should include servers all Availability Zones being used)"
    default: {}

  ha_proxy.headers:
    description: "Hash of custom headers you wish you have set on each request. Spaces are automatically escaped, but any other haproxy delimiters will need to be escaped manually"
    example: |
      headers:
        X-Application-ID: my-custom-header
        MyCustomHeader: 3

  ha_proxy.rsp_headers:
    description: "Hash of custom headers you wish you have set on each request. Spaces are automatically escaped, but any other haproxy delimiters will need to be escaped manually"
    example: |
      rsp_headers:
        X-Application-ID: my-custom-header
        MyCustomHeader: 3

  ha_proxy.tcp:
    description: "List of mappings to perform tcp-based proxying on. See example for mapping datastructure and keys"
    default: []
    example:
      tcp:
        - name: wss        # required - name of backend
          port: 4443       # required - port haproxy should listen on
          backend_servers: # required - list of backend IPs to connect to
          - 10.20.10.10
          - 10.20.10.11
          backend_port: 80 # optional - sets backend port - otherwise defaults to `port`
          ssl: true        # optional - enables ssl, and uses the `ha_proxy.ssl_pem` provided key
  ha_proxy.resolvers:
    description: "List of DNS servers"
    example:
      resolvers:
        private: 10.0.0.2
        public: 8.8.8.8
  ha_proxy.dns_hold:
    description: "DNS Hold time"
    default: 10s
  ha_proxy.accept_proxy:
    description: "Allow accept proxy"
    default: false
