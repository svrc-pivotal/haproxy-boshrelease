<% require "digest"%>

global
    log <%= p('ha_proxy.syslog_server') %> syslog <%= p('ha_proxy.log_level') %>
    daemon
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param <%= p("ha_proxy.default_dh_param") %>
    stats socket /var/vcap/sys/run/haproxy/stats.sock mode 600 level admin
    stats timeout 2m

defaults
    log global
    maxconn 64000
    option http-server-close
    option httplog
    option forwardfor
    option contstats
    timeout connect         <%= p("ha_proxy.connect_timeout").to_i    * 1000 %>ms
    timeout client          <%= p("ha_proxy.client_timeout").to_i     * 1000 %>ms
    timeout server          <%= p("ha_proxy.server_timeout").to_i     * 1000 %>ms
    timeout tunnel          <%= p("ha_proxy.websocket_timeout").to_i  * 1000 %>ms
    timeout http-keep-alive <%= p("ha_proxy.keepalive_timeout").to_i  * 1000 %>ms
    timeout http-request    <%= p("ha_proxy.request_timeout").to_i    * 1000 %>ms
    timeout queue           <%= p("ha_proxy.queue_timeout").to_i      * 1000 %>ms

<% if p("ha_proxy.stats_enable") %>
listen stats
    bind <%= p("ha_proxy.stats_bind") %>
    acl private src <%= p("ha_proxy.trusted_stats_cidrs") %>
    http-request deny unless private
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /<%= p("ha_proxy.stats_uri") %>
    stats auth <%= p("ha_proxy.stats_user") %>:<%= p("ha_proxy.stats_password") %>
<% end %>

<%# HTTP Frontend %>

<%
if_p("ha_proxy.resolvers") do |resolvers|
%>
resolvers default
    hold valid <%= p("ha_proxy.dns_hold") %>
<%
    resolvers.each do |resolver|
%>
    nameserver <%= resolver.keys[0] %> <%= resolver.values[0] %>:53
<%
  end
end
%>


<% unless p("ha_proxy.disable_http") %>
frontend http-in
    mode http
    bind :80
    default_backend http-routers
<%
if_p("ha_proxy.headers") do |headers|
  headers.each do |header, value|
%>
    reqadd <%= header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<%
if_p("ha_proxy.rsp_headers") do |rsp_headers|
  rsp_headers.each do |rsp_header, value|
%>
    rspadd <%= rsp_header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl private src <%= p("ha_proxy.trusted_domain_cidrs") %>
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal !private
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
    acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
    use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ http if ! xfp_exists

<% if p("ha_proxy.https_redirect_all") == true %>
    redirect scheme https code 301 if !{ ssl_fc }
<% end %>
<% unless p("ha_proxy.https_redirect_all") == true %>
    acl ssl_redirect hdr(host),lower,map_end(/var/vcap/jobs/haproxy/config/ssl_redirect.map,false) -m str true
    redirect scheme https code 301 if ssl_redirect
<% end %>

<% end %>

<%# HTTPS Frontend %>

<% if_p("ha_proxy.ssl_pem") do |pem| %>
frontend https-in
    mode http
    <% if p("ha_proxy.accept_proxy") %>
    bind :443 accept-proxy ssl crt /var/vcap/jobs/haproxy/config/ssl no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    <% else %>
    bind :443 ssl crt /var/vcap/jobs/haproxy/config/ssl no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    <% end %>
    default_backend http-routers
<%
if_p("ha_proxy.headers") do |headers|
  headers.each do |header, value|
%>
    reqadd <%= header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<%
if_p("ha_proxy.rsp_headers") do |rsp_headers|
  rsp_headers.each do |rsp_header, value|
%>
    rspadd <%= rsp_header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>

<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl private src <%= p("ha_proxy.trusted_domain_cidrs") %>
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal !private
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
  acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
  use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    acl xfp_exists hdr_cnt(X-Forwarded-Proto) gt 0
    reqadd X-Forwarded-Proto:\ https if ! xfp_exists

<% end %>

<%# HTTPS Websockets Frontend %>

<% if p("ha_proxy.enable_4443") == true %>
frontend wss-in
    mode http
    <% if p("ha_proxy.accept_proxy") %>
    bind :4443 accept-proxy ssl crt /var/vcap/jobs/haproxy/config/ssl no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    <% else %>
    bind :4443 ssl crt /var/vcap/jobs/haproxy/config/ssl no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    <% end %>
    default_backend http-routers
<%
if_p("ha_proxy.headers") do |headers|
  headers.each do |header, value|
%>
    reqadd <%= header.gsub(/(?!:\\)( )/, '\ ') %>:\ <%= value.gsub(/(?!:\\) /, '\ ') %>
<%
  end
end
%>


<% if p("ha_proxy.internal_only_domains").size > 0 %>
    acl private src <%= p("ha_proxy.trusted_domain_cidrs") %>
<% p("ha_proxy.internal_only_domains").each do |domain| %>
    acl internal hdr(Host) -m sub <%= domain %>
<% end %>
    http-request deny if internal !private
<% end %>

<% p('ha_proxy.routed_backend_servers').keys.each do |prefix| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
  acl routed_backend_<%= prefix_hash %> path_beg <%= prefix %>
  use_backend http-routed-backend-<%= prefix_hash %> if routed_backend_<%= prefix_hash %>
<% end %>
    reqadd X-Forwarded-Proto:\ https

<%# Default Backend %>

<% end %>
backend http-routers
    mode http
    balance roundrobin
    <% if p("ha_proxy.compress_types") != "" %>
    compression algo gzip
    compression type <%= p("ha_proxy.compress_types") %>
    <% end %>
    <% p("ha_proxy.backend_servers").each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= p("ha_proxy.backend_port") %> <% if_p("ha_proxy.resolvers") do %> resolvers default <% end %> check inter 1000 <% if p("ha_proxy.backend_ssl_verify") %> ssl verify required ca-file /var/vcap/jobs/haproxy/config/backend-ca-certs.pem <% elsif p("ha_proxy.backend_ssl_noverify") %> ssl verify none <% end %> <% if_p("ha_proxy.backend_ssl_verifyhost") do | verify_hostname | %> verifyhost <%= verify_hostname %> <% end %>
    <% end %>

<%# Routed Backends %>

<% p('ha_proxy.routed_backend_servers').each do |prefix, data| %>
<% prefix_hash = (Digest::SHA256.hexdigest prefix.to_s)[0..5] %>
backend http-routed-backend-<%= prefix_hash %>
    mode http
    balance roundrobin
    <% if p("ha_proxy.compress_types") != "" %>
    compression algo gzip
    compression type <%= p("ha_proxy.compress_types") %>
    <% end %>
    <% data["servers"].each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= data["port"] %> <% if_p("ha_proxy.resolvers") do %> resolvers default <% end %> check inter 1000
    <% end %>
<% end %>

<%# TCP Backends %>
<% p("ha_proxy.tcp").each do |tcp_proxy| %>
    frontend tcp-frontend_<%= tcp_proxy["name"]%>
    mode tcp
<% if tcp_proxy["ssl"] %>
    <% if p("ha_proxy.accept_proxy") %>
    bind :<%= tcp_proxy["port"] %> accept-proxy ssl crt /var/vcap/jobs/haproxy/config/ssl no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    <% else %>
    bind :<%= tcp_proxy["port"] %> ssl crt /var/vcap/jobs/haproxy/config/ssl no-sslv3 ciphers <%= p("ha_proxy.ssl_ciphers") %>
    <% end %>
<% else %>
    bind :<%= tcp_proxy["port"] %>
<% end %>
    default_backend tcp-<%= tcp_proxy["name"] %>

backend tcp-<%= tcp_proxy["name"] %>
    mode tcp
<%
backend_port = tcp_proxy["port"]
if tcp_proxy["backend_port"]
  backend_port = tcp_proxy["backend_port"]
end %>
<% tcp_proxy["backend_servers"].each_with_index do |ip, index| %>
        server node<%= index %> <%= ip %>:<%= backend_port %> <% if_p("ha_proxy.resolvers") do %> resolvers default <% end %> check inter 1000
<% end %>
<% end %>
